# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
FollowPathGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: path_msgs/FollowPathGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
## Request to follow a path

# follower_options: Options for the path follower
path_msgs/FollowerOptions follower_options

# path: The path to follow
path_msgs/PathSequence path


================================================================================
MSG: path_msgs/FollowerOptions
## Options for path following algorithms

# init_mode: Determines how the path follower reacts to a new path:
#  INIT_MODE_STOP will cause the robot to brake
#  INIT_MODE_CONTINUE will not send a brake command
uint8 INIT_MODE_STOP = 0
uint8 INIT_MODE_CONTINUE = 1
uint8 init_mode

# velocity: Driving speed of the robot (interpreted as recommended value)
float32 velocity

# robot_controller: [optional] name of the controller to use
std_msgs/String robot_controller

# local_planner: [optional] name of the local planner to use
std_msgs/String local_planner

# collision_avoider: [optional] name of the collision avoider to use
std_msgs/String collision_avoider

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: path_msgs/PathSequence
## A sequence of directional paths

Header header
path_msgs/DirectionalPath[] paths

================================================================================
MSG: path_msgs/DirectionalPath
## A path with an associated direction
Header header

# poses: The waypoints on this path
geometry_msgs/PoseStamped[] poses

# forward: Determines if the robot should drive forwards or in reverse on this path
bool forward

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
